$PBExportHeader$f_valida_prestamos_usuario_dep.srf
global type f_valida_prestamos_usuario_dep from function_object
end type

forward prototypes
global function integer f_valida_mat_alumno_depto (long p_cuenta, ref string p_nombre)
global function string f_valida_prestamos_usuario_dep (long p_cuenta, long p_depto, long p_area, integer p_tipo_usuario)
end prototypes

global function integer f_valida_mat_alumno_depto (long p_cuenta, ref string p_nombre);integer li_existe
long ll_cuenta
string ls_nombre


select dbo.v_sce_banderas_inscrito.cuenta,   
dbo.v_sce_alumnos.nombre+ ' ' + dbo.v_sce_alumnos.apaterno+' ' +dbo.v_sce_alumnos.amaterno 
into :ll_cuenta, :ls_nombre

from dbo.v_sce_alumnos	 
inner join	dbo.v_sce_academicos on dbo.v_sce_alumnos.cuenta = dbo.v_sce_academicos.cuenta
inner join	dbo.v_sce_carreras on dbo.v_sce_academicos.cve_carrera = dbo.v_sce_carreras.cve_carrera 
left outer join dbo.v_sce_banderas_inscrito on dbo.v_sce_alumnos.cuenta = dbo.v_sce_banderas_inscrito.cuenta

where dbo.v_sce_alumnos.cuenta = :p_cuenta
using gtr_sumuia; 

if gtr_sumuia.SQLCode = -1 then 
		messagebox("Error SUMUIA: Validación de alumno.", gtr_sumuia.SQLErrText)	
		li_existe=-1
else
	if isnull(ll_cuenta) then
		if isnull(ls_nombre) or ls_nombre='' then
			li_existe=-1
		else
		p_nombre=ls_nombre
		li_existe=0	
	end if
	else
		p_nombre=ls_nombre
		li_existe=1	
	end if
end if

return (li_existe)
end function

global function string f_valida_prestamos_usuario_dep (long p_cuenta, long p_depto, long p_area, integer p_tipo_usuario);integer li_prestamos=0, li_row, li_i
string ls_areas=''

datastore lds_prestados

lds_prestados =  create datastore

lds_prestados.dataobject ='d_gen_pres_solicitante_dep'
lds_prestados.settransobject(gtr_sumuia)	
lds_prestados.Retrieve(p_depto,p_cuenta,p_tipo_usuario)
li_row = lds_prestados.Rowcount()


for li_i=1 to li_row

	if lds_prestados.GetItemNumber(li_i,'spre_areas_cvearea') <> p_area then
		ls_areas=ls_areas+', '+lds_prestados.GetItemString(li_i,'spre_areas_descripcion')
	end if
	
next

if len(ls_areas)>0 then
	ls_areas=trim(right(ls_areas,len(ls_areas)-2))
end if

return (ls_areas)
end function

